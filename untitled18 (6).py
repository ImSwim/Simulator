# -*- coding: utf-8 -*-
"""Untitled18.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1GI9BqjURKrB-yV-htTVew0PefnK9UQ0T
"""

# -*- coding: utf-8 -*-
"""
Multi-SMR Monitoring System with isolated reactor errors.
하나의 SMR에서 오류가 발생하면 해당 SMR만 오류 상태(수동 모드)로 전환되고,
다른 SMR은 오류가 진행 중인 동안 오류 이벤트가 발생하지 않아 정상 작동하도록 합니다.
"""

import sys
import os
import csv
import random
from datetime import datetime
from PyQt5.QtWidgets import (
    QApplication, QMainWindow, QWidget, QGridLayout, QVBoxLayout, QHBoxLayout,
    QGroupBox, QLabel, QPushButton, QSlider, QProgressBar, QFrame, QSpinBox, QMessageBox
)
from PyQt5.QtCore import Qt, QTimer

# 전역 오류 플래그 (하나의 SMR에서 오류가 발생하면 True)
GLOBAL_ERROR_ACTIVE = False

# 로그 파일 경로
LOG_FILE_PATH = r"C:\Users\XOMIN\Downloads\error_log.csv"

def init_log_file():
    if not os.path.exists(LOG_FILE_PATH):
        try:
            with open(LOG_FILE_PATH, mode='w', newline='') as csvfile:
                writer = csv.writer(csvfile)
                writer.writerow(["Room", "오류내용", "오류 발생 시각", "대기 시간(초)", "조치 완료 시각"])
        except Exception as e:
            print(f"로그 파일 초기화 실패: {e}")

# SMR 제어를 위한 개별 위젯 (각 룸 별로 독립 제어)
class SMRWidget(QWidget):
    def __init__(self, room_number, parent=None):
        super().__init__(parent)
        self.room = room_number  # Room 번호
        self.setStyleSheet("border: 1px solid black;")

        # 시뮬레이션 관련 변수들
        self.ambient_temp = 25.0
        self.reactor_temp = 600.0           # 정상상태: 600°C 유지
        self.heat_exchanger_temp = 150.0
        self.cooling_tower_temp = 40.0
        self.total_energy = 0.0
        self.total_time = 0.0
        self.simulation_dt = 1.0
        self.water_level = 100.0
        self.current_day = 1
        self.manual_mode = False
        self.current_error_time = None

        self.init_ui()

        # 시뮬레이션 타이머 (3초마다)
        self.simulation_timer = QTimer()
        self.simulation_timer.timeout.connect(self.update_simulation)
        self.simulation_timer.start(3000)

        # DAY 업데이트 타이머 (30초마다)
        self.day_timer = QTimer()
        self.day_timer.timeout.connect(self.update_day)
        self.day_timer.start(30000)

        # 오류 이벤트 예약 (10~20초 후, 개별적으로 발생)
        self.schedule_next_error()

    def init_ui(self):
        main_layout = QVBoxLayout()
        self.setLayout(main_layout)

        # 상단 영역: 룸 번호, 데모 버전, DAY, 제어봉 상태, 연료 정보
        top_bar = self.create_top_bar()
        main_layout.addLayout(top_bar)

        # 중앙 영역: 좌측 정보 패널 + 우측 제어 및 게이지 패널
        center_layout = QHBoxLayout()
        main_layout.addLayout(center_layout)
        left_panel = self.create_left_panel()
        center_layout.addWidget(left_panel)
        right_panel = self.create_right_panel()
        center_layout.addWidget(right_panel)

        # 하단 영역: 수동 복구 버튼 및 수위 표시
        bottom_bar = self.create_bottom_bar()
        main_layout.addLayout(bottom_bar)

    def create_top_bar(self):
        layout = QHBoxLayout()
        room_label = QLabel(f"Room {self.room}")
        room_label.setStyleSheet("font-weight: bold; font-size: 16px;")
        layout.addWidget(room_label)

        demo_label = QLabel("DEMO VERSION")
        demo_label.setStyleSheet("font-weight: bold; color: red; font-size: 16px; margin-left: 10px;")
        layout.addWidget(demo_label)

        self.day_label = QLabel(f"DAY {self.current_day}")
        self.day_label.setStyleSheet("font-size: 16px; margin-left: 15px;")
        layout.addWidget(self.day_label)

        self.rod_status_label = QLabel("Control Rod Position: 50%")
        self.rod_status_label.setStyleSheet("font-size: 16px; margin-left: 15px;")
        layout.addWidget(self.rod_status_label)

        fuel_label = QLabel("Fuel: 100%")
        fuel_label.setStyleSheet("font-size: 16px; margin-left: 15px;")
        layout.addWidget(fuel_label)

        layout.addStretch()
        return layout

    def create_left_panel(self):
        container = QFrame()
        container_layout = QVBoxLayout()
        container.setLayout(container_layout)

        # TEMPERATURES 그룹 박스
        temp_group = QGroupBox("TEMPERATURES (°C)")
        temp_layout = QGridLayout()
        lbl_reactor = QLabel("Reactor:")
        self.lbl_reactor_temp = QLabel(f"{self.reactor_temp:.1f}")
        lbl_hex = QLabel("Heat Exchanger:")
        self.lbl_hex_temp = QLabel(f"{self.heat_exchanger_temp:.1f}")
        lbl_tower = QLabel("Cooling Tower:")
        self.lbl_cool_temp = QLabel(f"{self.cooling_tower_temp:.1f}")
        temp_layout.addWidget(lbl_reactor, 0, 0)
        temp_layout.addWidget(self.lbl_reactor_temp, 0, 1)
        temp_layout.addWidget(lbl_hex, 1, 0)
        temp_layout.addWidget(self.lbl_hex_temp, 1, 1)
        temp_layout.addWidget(lbl_tower, 2, 0)
        temp_layout.addWidget(self.lbl_cool_temp, 2, 1)
        temp_group.setLayout(temp_layout)
        container_layout.addWidget(temp_group)

        # POWER OUTPUT 그룹 박스
        power_group = QGroupBox("POWER OUTPUT")
        power_layout = QGridLayout()
        lbl_power = QLabel("Power Output (kW):")
        self.lbl_power = QLabel("0")
        lbl_avg_power = QLabel("Average Power (kW):")
        self.lbl_avg_power = QLabel("0")
        lbl_energy = QLabel("Total Energy Produced:")
        self.lbl_energy_val = QLabel("0")
        power_layout.addWidget(lbl_power, 0, 0)
        power_layout.addWidget(self.lbl_power, 0, 1)
        power_layout.addWidget(lbl_avg_power, 1, 0)
        power_layout.addWidget(self.lbl_avg_power, 1, 1)
        power_layout.addWidget(lbl_energy, 2, 0)
        power_layout.addWidget(self.lbl_energy_val, 2, 1)
        power_group.setLayout(power_layout)
        container_layout.addWidget(power_group)

        # COOLANTS 그룹 박스
        coolant_group = QGroupBox("COOLANTS")
        coolant_layout = QGridLayout()
        lbl_leak = QLabel("Leakage (L/day):")
        self.lbl_leak = QLabel("0")
        lbl_primary = QLabel("Primary Flow (%):")
        self.lbl_primary = QLabel("50")
        lbl_secondary = QLabel("Secondary Flow (%):")
        self.lbl_secondary = QLabel("50")
        coolant_layout.addWidget(lbl_leak, 0, 0)
        coolant_layout.addWidget(self.lbl_leak, 0, 1)
        coolant_layout.addWidget(lbl_primary, 1, 0)
        coolant_layout.addWidget(self.lbl_primary, 1, 1)
        coolant_layout.addWidget(lbl_secondary, 2, 0)
        coolant_layout.addWidget(self.lbl_secondary, 2, 1)
        coolant_group.setLayout(coolant_layout)
        container_layout.addWidget(coolant_group)

        container_layout.addStretch()
        return container

    def create_right_panel(self):
        container = QFrame()
        container_layout = QVBoxLayout()
        container.setLayout(container_layout)

        # 4개의 Vertical ProgressBar 게이지 (R1 ~ R4)
        gauge_layout = QHBoxLayout()
        self.gauge_bars = []
        gauge_labels = [
            "R1\n(Reactor Temp.)",
            "R2\n(Heat Exchanger)",
            "R3\n(Cooling Tower)",
            "R4\n(Control Rod)"
        ]
        for label in gauge_labels:
            box = QVBoxLayout()
            lbl = QLabel(label)
            lbl.setAlignment(Qt.AlignCenter)
            bar = QProgressBar()
            bar.setOrientation(Qt.Vertical)
            bar.setRange(0, 100)
            bar.setValue(25)
            bar.setFixedHeight(150)
            box.addWidget(lbl)
            box.addWidget(bar)
            gauge_layout.addLayout(box)
            self.gauge_bars.append(bar)
        container_layout.addLayout(gauge_layout)

        # 제어 입력: 슬라이더와 SpinBox
        control_layout = QVBoxLayout()
        # Control Rod Position 슬라이더
        row = QHBoxLayout()
        lbl = QLabel("Control Rod Position (%)")
        self.control_rod_slider = QSlider(Qt.Horizontal)
        self.control_rod_slider.setRange(0, 100)
        self.control_rod_slider.setValue(50)
        self.control_rod_slider.setStyleSheet("""
            QSlider::groove:horizontal {
                height: 10px;
                background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop:0 #1e90ff, stop:1 #87cefa);
                border: 1px solid #999;
                margin: 0px;
            }
            QSlider::handle:horizontal {
                background: #eee;
                border: 1px solid #444;
                width: 18px;
                margin: -5px 0;
                border-radius: 3px;
            }
        """)
        self.control_rod_slider.valueChanged.connect(self.rod_position_changed)
        spin = QSpinBox()
        spin.setRange(0, 100)
        spin.setValue(50)
        self.control_rod_slider.valueChanged.connect(spin.setValue)
        spin.valueChanged.connect(self.control_rod_slider.setValue)
        row.addWidget(lbl)
        row.addWidget(self.control_rod_slider)
        row.addWidget(spin)
        control_layout.addLayout(row)

        # Primary Coolant Flow 슬라이더
        row = QHBoxLayout()
        lbl_primary = QLabel("Primary Coolant Flow (%)")
        self.primary_coolant_slider = QSlider(Qt.Horizontal)
        self.primary_coolant_slider.setRange(0, 100)
        self.primary_coolant_slider.setValue(50)
        spin_primary = QSpinBox()
        spin_primary.setRange(0, 100)
        spin_primary.setValue(50)
        self.primary_coolant_slider.valueChanged.connect(spin_primary.setValue)
        spin_primary.valueChanged.connect(self.primary_coolant_slider.setValue)
        row.addWidget(lbl_primary)
        row.addWidget(self.primary_coolant_slider)
        row.addWidget(spin_primary)
        control_layout.addLayout(row)

        # Secondary Coolant Flow 슬라이더
        row = QHBoxLayout()
        lbl_secondary = QLabel("Secondary Coolant Flow (%)")
        self.secondary_coolant_slider = QSlider(Qt.Horizontal)
        self.secondary_coolant_slider.setRange(0, 100)
        self.secondary_coolant_slider.setValue(50)
        spin_secondary = QSpinBox()
        spin_secondary.setRange(0, 100)
        spin_secondary.setValue(50)
        self.secondary_coolant_slider.valueChanged.connect(spin_secondary.setValue)
        spin_secondary.valueChanged.connect(self.secondary_coolant_slider.setValue)
        row.addWidget(lbl_secondary)
        row.addWidget(self.secondary_coolant_slider)
        row.addWidget(spin_secondary)
        control_layout.addLayout(row)

        # Emergency Coolant Flow 슬라이더
        row = QHBoxLayout()
        lbl_emergency = QLabel("Emergency Coolant Flow (%)")
        self.emergency_coolant_slider = QSlider(Qt.Horizontal)
        self.emergency_coolant_slider.setRange(0, 100)
        self.emergency_coolant_slider.setValue(0)
        spin_emergency = QSpinBox()
        spin_emergency.setRange(0, 100)
        spin_emergency.setValue(0)
        self.emergency_coolant_slider.valueChanged.connect(spin_emergency.setValue)
        spin_emergency.valueChanged.connect(self.emergency_coolant_slider.setValue)
        row.addWidget(lbl_emergency)
        row.addWidget(self.emergency_coolant_slider)
        row.addWidget(spin_emergency)
        control_layout.addLayout(row)

        container_layout.addLayout(control_layout)
        container_layout.addStretch()
        return container

    def create_bottom_bar(self):
        layout = QHBoxLayout()
        self.manual_override_button = QPushButton("수동 개입 모드 해제")
        self.manual_override_button.setVisible(False)
        self.manual_override_button.clicked.connect(self.manual_recovery)
        layout.addWidget(self.manual_override_button)

        water_level_label = QLabel("Water Level:")
        layout.addWidget(water_level_label)
        self.water_level_bar = QProgressBar()
        self.water_level_bar.setRange(0, 100)
        self.water_level_bar.setValue(int(self.water_level))
        self.water_level_bar.setFixedWidth(150)
        layout.addWidget(self.water_level_bar)

        layout.addStretch()
        return layout

    def rod_position_changed(self, value):
        self.rod_status_label.setText(f"Control Rod Position: {value}%")

    def update_day(self):
        self.current_day += 1
        self.day_label.setText(f"DAY {self.current_day}")

    def update_simulation(self):
        if not self.manual_mode:
            target_temp = 600.0
            error = target_temp - self.reactor_temp
            adjustment_rod = int(error * 0.1)
            new_rod = self.control_rod_slider.value() - adjustment_rod
            new_rod = max(0, min(100, new_rod))
            self.control_rod_slider.setValue(new_rod)

            adjustment_primary = int(error * 0.05)
            new_primary = self.primary_coolant_slider.value() - adjustment_primary
            new_primary = max(0, min(100, new_primary))
            self.primary_coolant_slider.setValue(new_primary)

            adjustment_secondary = int(error * 0.05)
            new_secondary = self.secondary_coolant_slider.value() - adjustment_secondary
            new_secondary = max(0, min(100, new_secondary))
            self.secondary_coolant_slider.setValue(new_secondary)

            self.reactor_temp += (target_temp - self.reactor_temp) * 0.1
            self.heat_exchanger_temp = self.reactor_temp * 0.5 + 25
            self.cooling_tower_temp = self.ambient_temp + (self.heat_exchanger_temp - self.ambient_temp) * 0.3

            if self.water_level < 100:
                self.water_level = min(100, self.water_level + 1)
        else:
            rod = self.control_rod_slider.value()
            primary_flow = self.primary_coolant_slider.value()
            secondary_flow = self.secondary_coolant_slider.value()
            emergency_flow = self.emergency_coolant_slider.value()
            heat_gain = (100 - rod) * 0.5
            cooling_effect = ((primary_flow * 0.3) + (secondary_flow * 0.2) + (emergency_flow * 0.5)) / 100
            self.reactor_temp += (heat_gain - cooling_effect * (self.reactor_temp - self.ambient_temp)) * self.simulation_dt
            self.heat_exchanger_temp = self.reactor_temp * 0.5 + 25
            self.cooling_tower_temp = self.ambient_temp + (self.heat_exchanger_temp - self.ambient_temp) * 0.3

        self.lbl_reactor_temp.setText(f"{self.reactor_temp:.1f}")
        self.lbl_hex_temp.setText(f"{self.heat_exchanger_temp:.1f}")
        self.lbl_cool_temp.setText(f"{self.cooling_tower_temp:.1f}")

        r1_val = int(max(0, min(100, (self.reactor_temp - 25) / (1000 - 25) * 100)))
        r2_val = int(max(0, min(100, (self.heat_exchanger_temp - 25) / (500 - 25) * 100)))
        r3_val = int(max(0, min(100, (self.cooling_tower_temp - self.ambient_temp) / (100 - self.ambient_temp) * 100)))
        r4_val = self.control_rod_slider.value()

        gauge_values = [r1_val, r2_val, r3_val, r4_val]
        for bar, val in zip(self.gauge_bars, gauge_values):
            bar.setValue(val)

        power_output = (100 - self.control_rod_slider.value()) * 2
        self.lbl_power.setText(f"{power_output:.1f}")
        self.total_time += self.simulation_dt
        self.total_energy += power_output * self.simulation_dt
        avg_power = self.total_energy / self.total_time
        self.lbl_avg_power.setText(f"{avg_power:.1f}")
        self.lbl_energy_val.setText(f"{self.total_energy:.1f}")
        self.lbl_leak.setText("0")
        self.water_level_bar.setValue(int(self.water_level))

    def schedule_next_error(self):
        # 현재 SMR이 수동 모드가 아니고, 다른 SMR에서 오류 진행 중이 아니면 오류 이벤트 예약
        if not self.manual_mode and not GLOBAL_ERROR_ACTIVE:
            delay = random.randint(10000, 20000)  # 10~20초 (밀리초)
            QTimer.singleShot(delay, self.trigger_manual_override)

    def trigger_manual_override(self):
        global GLOBAL_ERROR_ACTIVE
        # 다른 SMR에서 오류 진행 중이면 이 SMR은 오류 발생시키지 않음
        if self.manual_mode or GLOBAL_ERROR_ACTIVE:
            return

        scenario = random.choice(["temperature_rise", "coolant_failure", "water_leak"])
        if scenario == "temperature_rise":
            self.reactor_temp = 700.0
            error_message = "온도 급상승: 원자로 온도가 700°C로 상승하였습니다."
        elif scenario == "coolant_failure":
            self.primary_coolant_slider.setValue(10)
            self.secondary_coolant_slider.setValue(10)
            error_message = "냉각수 펌프 고장: Primary 및 Secondary 냉각수 유량이 급감하였습니다."
        elif scenario == "water_leak":
            self.water_level = 40.0
            error_message = "수위 하락: 냉각수 수위가 급격히 낮아졌습니다."

        self.simulation_timer.stop()
        self.manual_mode = True
        GLOBAL_ERROR_ACTIVE = True  # 전역 오류 플래그 활성화
        self.current_error_time = datetime.now()
        self.manual_override_button.setVisible(True)
        QMessageBox.warning(
            self, "오류 발생",
            f"{error_message}\n시연자가 슬라이더 조절 등으로 복구하여 원자로 온도를 650°C 미만으로 내려야 합니다."
        )

    def manual_recovery(self):
        global GLOBAL_ERROR_ACTIVE
        if self.reactor_temp < 650:
            action_time = datetime.now()
            waiting_time = (action_time - self.current_error_time).total_seconds() if self.current_error_time else 0
            self.log_error_event("Error", self.current_error_time, waiting_time, action_time)
            QMessageBox.information(
                self, "복구 성공",
                "복구 조건(원자로 온도 650°C 미만)이 달성되었습니다.\n자동 제어 모드로 복귀합니다."
            )
            self.manual_mode = False
            self.manual_override_button.setVisible(False)
            GLOBAL_ERROR_ACTIVE = False  # 전역 오류 플래그 해제
            self.simulation_timer.start(3000)
            self.schedule_next_error()
        else:
            QMessageBox.warning(
                self, "복구 실패",
                "복구 조건이 만족되지 않았습니다. 원자로 온도를 추가로 낮추세요."
            )

    def log_error_event(self, error_label, error_time, waiting_time, action_time):
        try:
            with open(LOG_FILE_PATH, mode='a', newline='') as csvfile:
                writer = csv.writer(csvfile)
                writer.writerow([
                    self.room,
                    error_label,
                    error_time.strftime("%Y-%m-%d %H:%M:%S") if error_time else "",
                    f"{waiting_time:.1f}",
                    action_time.strftime("%Y-%m-%d %H:%M:%S")
                ])
        except Exception as e:
            print(f"로그 기록 실패: {e}")

# 여러 SMR을 동시에 모니터링하기 위한 메인 윈도우 (2 x 2 배치)
class MultiSMRMonitor(QMainWindow):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("Multi-SMR Monitoring System")
        self.setGeometry(50, 50, 1200, 800)

        main_widget = QWidget()
        self.setCentralWidget(main_widget)
        grid_layout = QGridLayout()
        main_widget.setLayout(grid_layout)

        self.smr_widgets = []
        # Room 1~4에 대한 SMRWidget 생성 (각기 독립적으로 동작)
        for i in range(4):
            smr = SMRWidget(room_number=i+1)
            group_box = QGroupBox(f"Room {i+1}")
            box_layout = QVBoxLayout()
            box_layout.addWidget(smr)
            group_box.setLayout(box_layout)
            self.smr_widgets.append(smr)
            row = i // 2
            col = i % 2
            grid_layout.addWidget(group_box, row, col)

if __name__ == "__main__":
    init_log_file()
    app = QApplication(sys.argv)
    window = MultiSMRMonitor()
    window.show()
    sys.exit(app.exec_())